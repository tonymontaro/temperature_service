"""initiate DB

Revision ID: 1babe3d4ab1a
Revises: 
Create Date: 2025-01-18 18:23:12.234000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1babe3d4ab1a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('temperature_readings',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('building_id', sa.String(), nullable=False),
    sa.Column('room_id', sa.String(), nullable=False),
    sa.Column('sensor_id', sa.String(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('reading_time', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', 'reading_time')
    )
    # ### end auto generated Alembic commands ###

    # Convert table to hypertable
    op.execute("""
        SELECT create_hypertable('temperature_readings', 'reading_time', if_not_exists => TRUE);
    """)

    # Create continuous aggregate
    op.execute("""
        CREATE MATERIALIZED VIEW IF NOT EXISTS cagg_minute_avg
        WITH (timescaledb.continuous) AS
          SELECT
            time_bucket('1 minute', reading_time) AS bucket,
            building_id,
            room_id,
            AVG(temperature) AS avg_temp
          FROM temperature_readings
          GROUP BY bucket, building_id, room_id
        WITH NO DATA;
    """)

    # Enable real-time aggregation
    op.execute("""
        ALTER MATERIALIZED VIEW cagg_minute_avg 
        SET (timescaledb.materialized_only = false);
    """)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('temperature_readings')
    # ### end Alembic commands ###
